name: CD

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 0.1.0)'
        required: true
        type: string

jobs:
  # unit-tests:
  #   name: Unit Tests for Typescript
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       node-version: ['20.x', '22.x', '24.x']

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

  #     - name: Run Unit Tests
  #       uses: ./.github/actions/typescript/unit-tests/
  #       with:
  #         node-version: ${{ matrix.node-version }}
  # integration-tests:
  #   name: Test Integration of Typescript ${{ matrix.python-version }}
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       node-version: ['24.x']

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

  #     - name: Run Integration Tests
  #       uses: ./.github/actions/typescript/integration-tests
  #       with:
  #         node-version: ${{ matrix.python-version }}
  #         otel-prod-token: ${{ secrets.OTEL_PROD_TOKEN }}
  #         otel-prod-endpoint: ${{ secrets.OTEL_PROD_ENDPOINT }}
  
  build:
    runs-on: ubuntu-latest
    # needs: ['unit-tests', 'integration-tests']
    outputs:
      version: ${{ steps.version.outputs.version }}
      package-name: ${{ steps.package.outputs.name }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'
          
      - name: Determine version
        id: version
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"
          
      - name: Get package name
        id: package
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          echo "name=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
          echo "Package name: ${PACKAGE_NAME}"
          
      - name: Make script executable
        run: chmod +x ./scripts/*
          
      - name: Run packaging script
        run: ./scripts/package.sh
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            *.tgz
          retention-days: 30
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          
      - name: List downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          ls -la
    
      - name: Create Release with gh CLI
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create release and upload all .tgz files in one command
          gh release create "v${{ needs.build.outputs.version }}" \
            --repo "${{ github.repository }}" \
            --title "Release v${{ needs.build.outputs.version }}" \
            --notes "## Release v${{ needs.build.outputs.version }}
          
          ### Artifacts
          - NPM Package: \`${{ needs.build.outputs.package-name }}-${{ needs.build.outputs.version }}.tgz\`
          - Documentation: \`anaconda-opentelemetry-html-${{ needs.build.outputs.version }}.tgz\`
          
          ### Installation
          \`\`\`bash
          npm install ./${{ needs.build.outputs.package-name }}-${{ needs.build.outputs.version }}.tgz
          \`\`\`" \
            *.tgz
