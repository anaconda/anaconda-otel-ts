name: "[CD] Build and Upload NPM Package on Release"

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag name to build and upload packages for'
        required: true
        type: string

jobs:
  unit-tests:
    name: Unit Tests for Typescript
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: ['20.x', '22.x', '24.x']

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Run Unit Tests
        uses: ./.github/actions/typescript/unit-tests/
        with:
          node-version: ${{ matrix.node-version }}

  integration-tests:
    name: Test Integration of Typescript ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: ['24.x']

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Run Integration Tests
        uses: ./.github/actions/typescript/integration-tests
        with:
          node-version: ${{ matrix.python-version }}
          otel-prod-token: ${{ secrets.OTEL_PROD_TOKEN }}
          otel-prod-endpoint: ${{ secrets.OTEL_PROD_ENDPOINT }}

  build-and-release:
    runs-on: ubuntu-latest
    needs: ['unit-tests', 'integration-tests']
    outputs:
      version: ${{ steps.version.outputs.version }}
      package-name: ${{ steps.package.outputs.name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Setup Node.js
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6.0.0
        with:
          node-version: '24'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install jq (for version extraction)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Install dependencies
        run: npm ci

      - name: Make script executable and run
        run: |
          chmod +x ./scripts/*
          ./scripts/build.sh

      - name: Get package info and find generated files
        id: package_info
        run: |
          VERSION=$(jq -r '.version' package.json)
          PACKAGE_NAME=$(jq -r '.name' package.json)

          PACKAGE_FILENAME=$(echo "$PACKAGE_NAME" | sed 's/@//g; s/\//-/g')

          NPM_TGZ="${PACKAGE_FILENAME}-${VERSION}.tgz"
          DOCS_TGZ="anaconda-opentelemetry-html-${VERSION}.tgz"

          echo "npm_package=${NPM_TGZ}" >> $GITHUB_OUTPUT
          echo "docs_package=${DOCS_TGZ}" >> $GITHUB_OUTPUT

          # Check if both files exist and fail if not
          if [[ ! -f "${NPM_TGZ}" ]]; then
            echo "ERROR: NPM package file '${NPM_TGZ}' not found!"
            exit 1
          fi

          if [[ ! -f "${DOCS_TGZ}" ]]; then
            echo "ERROR: Docs package file '${DOCS_TGZ}' not found!"
            exit 1
          fi

      - name: Upload to Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          RELEASE_TAG="${{ github.event.release.tag_name || github.event.inputs.release_tag }}"

          gh release upload "$RELEASE_TAG" \
            "${{ steps.package_info.outputs.npm_package }}" \
            "${{ steps.package_info.outputs.docs_package }}" \
            --clobber \
            --repo ${{ github.repository }}

      - name: Publish to NPM
        env:
          NODE_AUTH_TOKEN: "${{ secrets.NPM_TOKEN }}"
        run: npm publish --access public
