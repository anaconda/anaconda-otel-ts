name: 'Run Integration Tests'
description: 'Runs integration tests on anaconda-opentelemetry package code'
inputs:
  node-version:
    description: 'Node version to use'
    required: true
  otel-prod-token:
    description: 'OpenTelemetry production token'
    required: true
  otel-prod-endpoint:
    description: 'OpenTelemetry production endpoint'
    required: true
runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      shell: bash
      working-directory: .
      run: npm ci || npm install

    - name: Set up Docker
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

    - name: Start OpenTelemetry Collector
      working-directory: .
      shell: bash
      run: |
        # Create local directory with open permissions
        mkdir -p /tmp/otel-output
        chmod 757 /tmp/otel-output

        CONFIG_PATH="./tests/manifests/otel-collector-config.yaml"

        # Use bind mount instead of Docker volume
        docker run -d \
          --name otel-collector \
          -p 4317:4317 \
          -p 4318:4318 \
          -v "$CONFIG_PATH:/etc/otelcol/config.yaml:ro" \
          -v "/tmp/otel-output:/tmp/otel-output" \
          otel/opentelemetry-collector-contrib:0.129.1 \
          --config=/etc/otelcol/config.yaml

    - name: Run integration tests
      shell: bash
      env:
        ATEL_DEFAULT_AUTH_TOKEN: ${{ inputs.otel-prod-token }}
        ATEL_DEFAULT_ENDPOINT: ${{ inputs.otel-prod-endpoint }}
      working-directory: .
      run: |
        export ATEL_METRICS_ENDPOINT=http://localhost:4318/v1/metrics
        timeout 30 bash -c 'until curl -s -o /dev/null -w "%{http_code}" $ATEL_METRICS_ENDPOINT 2>/dev/null | grep -q "^[0-9]"; do sleep 1; done' && echo "OpenTelemetry Collector is up!" || echo "Timeout waiting for collector"
        npm run test:integration